#!/bin/bash

while (( $# > 0 )); do
    case $1 in
    stash) vimargs+=('-c' 'Git stash view') ;;
    blame|log|k) vimargs+=('-c' 'Git '$1) ;;
    -h|--help) echo "USAGE: ${0##*/} [-h|--help] [blame|log|stash] [file]"; exit ;;
    --debug) debug=$2; shift ;;
    *) args+=("$1") ;;
    esac
    shift
done

(( ${#vimargs[*]} == 0 )) && vimargs+=('-c' 'Git k')

re="Git (stash|k)"
if [[ ${vimargs[*]} =~ $re ]]; then
    vimargs+=('-c' 'tabclose 1')
    vimargs+=('--cmd' 'cd '$PWD)
elif [[ ${vimargs[*]} =~ "blame" ]] && (( ${#args[*]} == 0 )); then
    echo "ERROR: You must choose a file when using the blame command"
    exit 2
fi

if (( ${#args[@]} > 0 )) && [[ ${args[@]} =~ all ]]; then
    # TODO: refactor this so that it doesn't break the syntax highlighting in vim
    [[ ${vimargs[*]} =~ "log" ]] && vimargs=("${vimargs[@]/log/log --all}")
    [[ ${vimargs[*]} =~ "k" ]] && vimargs=("${vimargs[@]/k/k --all}")
    delete=(--all)
    args=(${args[@]/$delete})
fi

(( ${#args[*]} > 0 )) && {
    origdir=$PWD
    filedir=${1%/*}
    cd ${filedir:-$PWD}
}

git rev-parse --is-inside-work-tree >/dev/null 2>&1 || {
    echo "Could not find a git working tree" >&2
    exit 1
}

[[ -z "${origdir+x}" ]] || cd ${origdir}

me=${0##*/}
exec ${me/vit/}vim ${debug:+"-V${debug}/tmp/vit.debug"} "${args[@]}" "${vimargs[@]}"
