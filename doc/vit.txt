*vit.txt* Git integration in Vim

               _ _    ~
        __   _(_) |_  ~
        \ \ / / | __| ~
         \ V /| | |_  ~
          \_/ |_|\__| ~


Provides a suite of tools and commands to allow a user to view and manipulate
the git status of files available to the vim session they are running in.

Author: Andrés Pérez <andres.f.perez@gmail.com>
License: Same as Vim. See |license|.

================================================================================
CONTENTS                                                       *vit*  *vit-contents*

    1. Usage ..................... |vit-usage|
    2. Commands .................. |vit-commands|
    3. Shell scripts ............. |vit-shellscript|

================================================================================
USAGE                                                                  *vit-usage*

:Git [|vit-commands|] [arguments]                              *vit-git* *vit-command*

The following are the available vit-commands:
        log       |vit-log|
        show      |vit-show|
        status    |vit-status|
        blame     |vit-blame|
        diff      |vit-diff|
        add       |vit-add|
        reset     |vit-reset|
        checkout  |vit-checkout|
        commit    |vit-commit|
        stash     |vit-stash|
        mv        |vit-mv|
        rm        |vit-rm|
        revert    |vit-revert|

If no arguments are given, the vit-command defaults to |vit-status|.

Interactive Windows~
                                                                     *vit-windows*
Some of the commands available with this plugin open special-purpose windows
that provide the requested information as well as some special behavior.

The following windows are available: |VitLog|, |VitStatus|, |VitShow|, |VitBlame|, and
|VitDiff|

================================================================================
COMANDS                                                             *vit-commands*

--------------------------------------------------------------------------------
log [file]                                                        *vit-log* *VitLog*

Opens an interactive window with the git log of the given file.

If no arguments are given, it defaults to the currently open buffer.

Mappings~
                                                                 *VitLog-mappings*
d            Opens a tab with a |VitDiff| for each file in the selected revision
<enter>      Opens a |VitShow| of the revision associated with the selected entry

--------------------------------------------------------------------------------
show [revision]                                                 *vit-show* *VitShow*

Opens an interactive window displaying information about what was changed in the
given revision.

If no arguments are given, it displays the last committed revision.

The equivalent git command is: >
    git show <rev>
>
Mappings~
                                                                *VitShow-mappings*
d            Opens |VitDiff| of file under cursor
D            Opens |VitDiff| of files in selected revision
o            Opens the file under the cursor as a new tab
O            Opens every files in the revision as individual tabs

--------------------------------------------------------------------------------
status                                                      *vit-status* *VitStatus*

Displays an interactive window displaying the status of the files in the working
directory.

The equivalent git command is: >
    git status --short
>
Mappings~
                                                              *VitStatus-mappings*
d            Opens |VitDiff| of file under cursor
+            Performs a |vit-add| of the file under cursor to the index
-            Performs a |vit-reset| of the file under cursor from the index

--------------------------------------------------------------------------------
blame                                                         *vit-blame* *VitBlame*

Opens an interactive window which displays the revision, filename, author and
timestamp of each line of the currently open buffer.

Displays a partial view of a git blame command

Mappings~
                                                               *VitBlame-mappings*
d            Opens |VitDiff| of files in selected revision
<enter>      Opens a |VitShow| of the selected revision

--------------------------------------------------------------------------------
diff [rev [file]]                                               *vit-diff* *VitDiff*

If arguments are given, revision is required and is defined as the revision with
which to compare the given file at HEAD. "file" is the repository file which the
comparison will be made with. It defaults to the currently open buffer.

If no arguments are given, it defaults 'file' to currently open buffer and
prompts the user for the revision to compare against.

The equivalent git command  is: >
    git diff <rev> -- <file>
>
A successful execution will open a split panel of the two versions of the file
being compared.

This view is of a vimdiff of the selected file with the indicated revision on
the left in a VitDiff window. On the right is the version of the file currently
in the working tree.

--------------------------------------------------------------------------------
add                                                                      *vit-add*

Performs a `git add` on the current buffer.

--------------------------------------------------------------------------------
reset                                                                  *vit-reset*

Resets the current file

Behavior in some Vit windows~
When the command is executed while a |VitLog| window is active, its behavior
changes to resetting the index to the revision of the log entry being
highligthed by the cursorline.

When the command is executed while a |VitShow| windows is active, it will
reset the index to the revision currently being displayed in the window.

--------------------------------------------------------------------------------
checkout [git checkout args]                                        *vit-checkout*

A pass-through command that performs a checkout with the given
arguments against the git repository of the currently open buffer.

If no arguments are given, it defaults to checkout out the HEAD of the
currently open buffer, effectively resetting it.

--------------------------------------------------------------------------------
commit  [git commit args]                                             *vit-commit*

Performs a commit on the files staged in the git repository of the currently
open buffer. If the current buffer is unstaged, it asks the user if they would
like it to be staged. If the user does not enter a message as a command option
(with -m argument) then it opens a window where the user can enter their
desired message.

--------------------------------------------------------------------------------
stash  [git stash args]                                                *vit-stash*

A pass-through command that performs a stash on the git repository
associated with the currently open buffer.

--------------------------------------------------------------------------------
mv NEW_NAME                                                               *vit-mv*

Performs a git mv on the current buffer to the NEW_NAME and refreshes the
buffer.

--------------------------------------------------------------------------------
rm                                                                        *vit-rm*

Removes the current buffer from vim and the git repository.

--------------------------------------------------------------------------------
revert REVISION                                                       *vit-revert*

Reverts only the current buffer to the specified revision. If no revision is 
given it prompts the user for the revision to compare against.

================================================================================
SHELL SCRIPT                                                     *vit-shellscript*

bin/vit [files]                                                       *vit-script*
bin/gvit [files]                                                     *gvit-script*

When executed, it will open a vim session with 3 windows. The top window is a
|VitLog| of the first file in the argument list. The bottom will have a |VitShow|
of the first revision in the log. On the right a |VitStatus| window will be open
if applicable.

If no arguments are given, the |VitLog| window defaults to showing the full log
of the repository.

This command is relatively similar to the gitk application which you might be
familiar with.


vim:tw=78 ts=8: ft=help:norl:
